
/*!
* jQuery HTML5 Uploader 1.0b
*
* http://www.igloolab.com/jquery-html5-uploader
*/
var xmlHttpRequest;
(function ($) {
	$.fn.html5Uploader = function (options) {
		var crlf = "\r\n";
		var boundary = "iloveigloo";
		var dashes = "--";
		var settings = {
		"name":null, //上传字段标示
		"postUrl":null, //文件数据处理URL
		"onClientAbort":null,  //读取操作终止时调用
		"onClientError":null, //出错时调用
		"onClientLoad":null,  //读取操作成功时调用
		"onClientLoadEnd":null, //无论是否成功，读取完成时调用。通常在onload和onerror后调用
		"onClientLoadStart":null, //读取将要开始时调用
		"onClientProgress":null,  //数据在读取过程中周期性调用
		"onServerAbort":null, //post操作结束时调用
		"onServerError":null, //错误发生时调用
		"onServerLoad":null, //post操作成功时调用
		"onServerLoadStart":null, //post数据将要开始时调用
		"onServerProgress":null,  //数据正在被post的过程中周期性调用
		"onServerReadyStateChange":null // 一个javascript功能对象无论任何时候readyState属性变化时调用。callback由用户界面现成调用。
		};
		if (options) {
			$.extend(settings, options);
		}
		return this.each(function (options) {
			var $this = $(this);
			if ($this.is("[type='file']")) {
				$this.bind("change", function () {
					var files = this.files;
					for (var i = 0; i < files.length; i++) {
						fileHandler(files[i]);
					}
				});
			} else {
				$this.bind("dragenter dragover", function () {
					return false;
				}).bind("drop", function (e) {
					var files = e.originalEvent.dataTransfer.files;
					for (var i = 0; i < files.length; i++) {
						fileHandler(files[i]);
					}
					return false;
				});
			}
		});
		
		function fileHandler(file) {
			var fileReader = new FileReader();
			fileReader.onabort = function (e) {
				if (settings.onClientAbort) {
					settings.onClientAbort(e, file);
				}
			};
			fileReader.onerror = function (e) {
				if (settings.onClientError) {
					settings.onClientError(e, file);
				}
			};
			fileReader.onload = function (e) {
				if (settings.onClientLoad) {
					settings.onClientLoad(e, file);
				}
			};
			fileReader.onloadend = function (e) {
				if (settings.onClientLoadEnd) {
					settings.onClientLoadEnd(e, file);
				}
			};
			fileReader.onloadstart = function (e) {
				if (settings.onClientLoadStart) {
					settings.onClientLoadStart(e, file);
				}
			};
			fileReader.onprogress = function (e) {
				if (settings.onClientProgress) {
					settings.onClientProgress(e, file);
				}
			};
			fileReader.readAsDataURL(file);
			xmlHttpRequest = new XMLHttpRequest();
			xmlHttpRequest.upload.onabort = function (e) {
				if (settings.onServerAbort) {
					settings.onServerAbort(e, file);
				}
			};
			xmlHttpRequest.upload.onerror = function (e) {
				if (settings.onServerError) {
					settings.onServerError(e, file);
				}
			};
			xmlHttpRequest.upload.onload = function (e) {
				if (settings.onServerLoad) {
					settings.onServerLoad(e, file);
				}
			};
			xmlHttpRequest.upload.onloadstart = function (e) {
				if (settings.onServerLoadStart) {
					settings.onServerLoadStart(e, file);
				}
			};
			xmlHttpRequest.upload.onprogress = function (e) {
				if (settings.onServerProgress) {
					settings.onServerProgress(e, file);
				}
			};
			xmlHttpRequest.onreadystatechange = function (e) {
				if (settings.onServerReadyStateChange) {  
					settings.onServerReadyStateChange(e, file);
				}
			};
			xmlHttpRequest.open("POST", settings.postUrl, true);
			if (file.getAsBinary) {
				var data = dashes + boundary + crlf + "Content-Disposition: form-data;" + "name=\"" + settings.name + "\";" + "filename=\"" + unescape(encodeURIComponent(file.name)) + "\"" + crlf + "Content-Type: application/octet-stream" + crlf + crlf + file.getAsBinary() + crlf + dashes + boundary + dashes;
				xmlHttpRequest.setRequestHeader("Content-Type", "multipart/form-data;boundary=" + boundary);
				xmlHttpRequest.sendAsBinary(data);
				
			} else {
				if (window.FormData) {
					var formData = new FormData();
					formData.append(settings.name, file);
					xmlHttpRequest.send(formData);
				}
			}
		}
	};
})(jQuery);
